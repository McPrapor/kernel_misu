#ifndef _SENTRAL_IIO_DEBUG_H_
#define _SENTRAL_IIO_DEBUG_H_

enum sentral_debug_error_register_code {
	SEN_DBG_ERROR_REG_CODE_SUCCESS =                    0x00,
	SEN_DBG_ERROR_REG_CODE_INIT_PASS =                  0x01,
	SEN_DBG_ERROR_REG_CODE_TEST_PASS =                  0x02,
	SEN_DBG_ERROR_REG_CODE_MAG_RESET_COUNT =            0x11,
	SEN_DBG_ERROR_REG_CODE_ACCEL_RESET_COUNT =          0x12,
	SEN_DBG_ERROR_REG_CODE_GYRO_RESET_COUNT =           0x14,
	SEN_DBG_ERROR_REG_CODE_RSVD_RESET_COUNT =           0x18,
	SEN_DBG_ERROR_REG_CODE_INIT_FAILED =                0x20,
	SEN_DBG_ERROR_REG_CODE_UNEXPECTED_DEVICE =          0x21,
	SEN_DBG_ERROR_REG_CODE_NO_DEVICE =                  0x22,
	SEN_DBG_ERROR_REG_CODE_UNKNOWN =                    0x23,
	SEN_DBG_ERROR_REG_CODE_DATA_UNAVAILABLE =           0x24,
	SEN_DBG_ERROR_REG_CODE_SLOW_SAMPLE_RATE =           0x25,
	SEN_DBG_ERROR_REG_CODE_DATA_OVERFLOW =              0x26,
	SEN_DBG_ERROR_REG_CODE_MW_MATH =                    0x30,
	SEN_DBG_ERROR_REG_CODE_MEM_ERROR =                  0x40,
	SEN_DBG_ERROR_REG_CODE_SWI3 =                       0x41,
	SEN_DBG_ERROR_REG_CODE_SWI4 =                       0x42,
	SEN_DBG_ERROR_REG_CODE_INST_ERROR =                 0x43,
	SEN_DBG_ERROR_REG_CODE_ALGO =                       0x50,
	SEN_DBG_ERROR_REG_CODE_SELF_TEST_FAIL =             0x60,
	SEN_DBG_ERROR_REG_CODE_SELF_TEST_X_FAIL =           0x61,
	SEN_DBG_ERROR_REG_CODE_SELF_TEST_Y_FAIL =           0x62,
	SEN_DBG_ERROR_REG_CODE_SELF_TEST_Z_FAIL =           0x64,
	SEN_DBG_ERROR_REG_CODE_HOST_BUF_CORRUPT_DISCARD =   0x70,
	SEN_DBG_ERROR_REG_CODE_HOST_BUF_CORRUPT_RETRIEVE =  0x71,
	SEN_DBG_ERROR_REG_CODE_HOST_BUF_NOT_INITIALIZED =   0x72,
	SEN_DBG_ERROR_REG_CODE_NO_PROGRAM_RAM_LEFT =        0x73,
	SEN_DBG_ERROR_REG_CODE_CODE_AND_DATA_NOT_ADJACENT = 0x74,
	SEN_DBG_ERROR_REG_CODE_NO_HOST_INTERRUPT =          0x75,
	SEN_DBG_ERROR_REG_CODE_SAMPLE_RATE =                0x80,
	SEN_DBG_ERROR_REG_CODE_I2C_QUEUE_OVERFLOW =         0x90,
};

enum sentral_debug_irq_state_code {
	SEN_DBG_IRQ_STATE_CODE_OFF = 0,
	SEN_DBG_IRQ_STATE_CODE_RUNNING = 1,
	SEN_DBG_IRQ_STATE_CODE_GPIO0 = 0x10,
	SEN_DBG_IRQ_STATE_CODE_GPIO1 = 0x11,
	SEN_DBG_IRQ_STATE_CODE_GPIO2 = 0x12,
	SEN_DBG_IRQ_STATE_CODE_GPIO3 = 0x13,
	SEN_DBG_IRQ_STATE_CODE_GPIO4 = 0x14,
	SEN_DBG_IRQ_STATE_CODE_GPIO5 = 0x15,
	SEN_DBG_IRQ_STATE_CODE_GPIO6 = 0x16,
	SEN_DBG_IRQ_STATE_CODE_I2CMASTER = 0x20,
	SEN_DBG_IRQ_STATE_CODE_I2CSLAVE_READ = 0x30,
	SEN_DBG_IRQ_STATE_CODE_I2CSLAVE_WRITE = 0x31,
	SEN_DBG_IRQ_STATE_CODE_TIM2 = 0x42,
	SEN_DBG_IRQ_STATE_CODE_TIM3 = 0x43,
	SEN_DBG_IRQ_STATE_CODE_TIM4 = 0x44,
	SEN_DBG_IRQ_STATE_CODE_SWI0 = 0x50,
	SEN_DBG_IRQ_STATE_CODE_SWI1 = 0x51,
	SEN_DBG_IRQ_STATE_CODE_SWI2 = 0x52,
	SEN_DBG_IRQ_STATE_CODE_SWI3 = 0x53,
	SEN_DBG_IRQ_STATE_CODE_SWI4 = 0x54,
	SEN_DBG_IRQ_STATE_CODE_SWI5 = 0x55,
};

enum sentral_debub_debug_state_code {
	SEN_DBG_DEBUG_STATE_CODE_ENTER =       0x00,
	SEN_DBG_DEBUG_STATE_CODE_LEAVE =       0x0F,
	SEN_DBG_DEBUG_STATE_CODE_INIT =        0x10,
	SEN_DBG_DEBUG_STATE_CODE_OUTER =       0x20,
	SEN_DBG_DEBUG_STATE_CODE_ALGO =        0x30,
	SEN_DBG_DEBUG_STATE_CODE_ALGO_SENSOR = 0x40,
	SEN_DBG_DEBUG_STATE_CODE_ALGO_ERROR =  0x50,
	SEN_DBG_DEBUG_STATE_CODE_ALGO_KALMAN = 0x60,
	SEN_DBG_DEBUG_STATE_CODE_TINI =        0x80,
	SEN_DBG_DEBUG_STATE_CODE_GYRO_GPIO =   0xA0,
	SEN_DBG_DEBUG_STATE_CODE_GYRO_I2C =    0xB0,
	SEN_DBG_DEBUG_STATE_CODE_MAG_GPIO =    0xC0,
	SEN_DBG_DEBUG_STATE_CODE_MAG_I2C =     0xD0,
	SEN_DBG_DEBUG_STATE_CODE_ACCEL_GPIO =  0xE0,
	SEN_DBG_DEBUG_STATE_CODE_ACCEL_I2C =   0xF0,
};

static const char *sentral_debug_error_register_string[] = {
	[SEN_DBG_ERROR_REG_CODE_SUCCESS] = "Success (no error)",
	[SEN_DBG_ERROR_REG_CODE_INIT_PASS] = "Init Pass (no error)",
	[SEN_DBG_ERROR_REG_CODE_TEST_PASS] = "Test Pass (no error)",
	[SEN_DBG_ERROR_REG_CODE_MAG_RESET_COUNT] = "The magnetometer has reset too many times",
	[SEN_DBG_ERROR_REG_CODE_ACCEL_RESET_COUNT] = "The accelerometer has reset too many times",
	[SEN_DBG_ERROR_REG_CODE_GYRO_RESET_COUNT] = "The gyroscope has reset too many times",
	[SEN_DBG_ERROR_REG_CODE_RSVD_RESET_COUNT] = "The reserved sensor has reset too many times",
	[SEN_DBG_ERROR_REG_CODE_INIT_FAILED] = "Sensorhub has failed to initialize",
	[SEN_DBG_ERROR_REG_CODE_UNEXPECTED_DEVICE] = "Unexpected device",
	[SEN_DBG_ERROR_REG_CODE_NO_DEVICE] = "No device",
	[SEN_DBG_ERROR_REG_CODE_UNKNOWN] = "Unknown",
	[SEN_DBG_ERROR_REG_CODE_DATA_UNAVAILABLE] = "Data unavailable",
	[SEN_DBG_ERROR_REG_CODE_SLOW_SAMPLE_RATE] = "Slow sample rate",
	[SEN_DBG_ERROR_REG_CODE_DATA_OVERFLOW] = "Data overflow",
	[SEN_DBG_ERROR_REG_CODE_MW_MATH] = "The double precision math library triggered an error",
	[SEN_DBG_ERROR_REG_CODE_MEM_ERROR] = "A memory error occurred",
	[SEN_DBG_ERROR_REG_CODE_SWI3] = "SWI3 was triggered without an interrupt handler",
	[SEN_DBG_ERROR_REG_CODE_SWI4] = "SWI4 was triggered without an interrupt handler",
	[SEN_DBG_ERROR_REG_CODE_INST_ERROR] = "An illegal instruction was executed",
	[SEN_DBG_ERROR_REG_CODE_ALGO] = "An algorithm specific error has been detected",
	[SEN_DBG_ERROR_REG_CODE_SELF_TEST_FAIL] = "The sensor self test has failed",
	[SEN_DBG_ERROR_REG_CODE_SELF_TEST_X_FAIL] = "The X axis on the sensor has failed",
	[SEN_DBG_ERROR_REG_CODE_SELF_TEST_Y_FAIL] = "The Y axis on the sensor has failed",
	[SEN_DBG_ERROR_REG_CODE_SELF_TEST_Z_FAIL] = "The Z axis on the sensor has failed",
	[SEN_DBG_ERROR_REG_CODE_HOST_BUF_CORRUPT_DISCARD] = "An invalid sensor ID was detected in the FIFO while overflowing",
	[SEN_DBG_ERROR_REG_CODE_HOST_BUF_CORRUPT_RETRIEVE] = "An invalid sensor ID was detected in the FIFO while sending to host",
	[SEN_DBG_ERROR_REG_CODE_HOST_BUF_NOT_INITIALIZED] = "The FIFO size is 0; init failed",
	[SEN_DBG_ERROR_REG_CODE_NO_PROGRAM_RAM_LEFT] = "We failed to allocate room for our data structures in program RAM",
	[SEN_DBG_ERROR_REG_CODE_CODE_AND_DATA_NOT_ADJACENT] = "We expected the code RAM and data RAM to be adjacent in address space, but they are not",
	[SEN_DBG_ERROR_REG_CODE_NO_HOST_INTERRUPT] = "The host interrupt value did not have the proper bits set",
	[SEN_DBG_ERROR_REG_CODE_SAMPLE_RATE] = "Invalid sample rate selected",
	[SEN_DBG_ERROR_REG_CODE_I2C_QUEUE_OVERFLOW] = "The I2C queue has overflowed",
};

static const char *sentral_debug_irq_state_string[] = {
	[SEN_DBG_IRQ_STATE_CODE_OFF] = "The interrupt routine has exited",
	[SEN_DBG_IRQ_STATE_CODE_RUNNING] = "The interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO0] = "The GPIO0 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO1] = "The GPIO1 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO2] = "The GPIO2 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO3] = "The GPIO3 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO4] = "The GPIO4 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO5] = "The GPIO5 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_GPIO6] = "The GPIO6 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_I2CMASTER] = "The I2C master interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_I2CSLAVE_READ] = "The I2C slave (read) interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_I2CSLAVE_WRITE] = "The I2C slave (write) interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_TIM2] = "The Timer 2 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_TIM3] = "The Timer 3 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_TIM4] = "The Timer 4 interrupt routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI0] = "The software interrupt 0 routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI1] = "The software interrupt 1 routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI2] = "The software interrupt 2 routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI3] = "The software interrupt 3 routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI4] = "The software interrupt 4 routine is running",
	[SEN_DBG_IRQ_STATE_CODE_SWI5] = "The software interrupt 5 routine is running",
};

static const char *sentral_debug_debug_state_string[] = {
	[SEN_DBG_DEBUG_STATE_CODE_ENTER] = "The current function has been called",
	[SEN_DBG_DEBUG_STATE_CODE_LEAVE] = "The current function is exiting",
	[SEN_DBG_DEBUG_STATE_CODE_INIT] = "Initialization code is running",
	[SEN_DBG_DEBUG_STATE_CODE_OUTER] = "The outerloop code is running",
	[SEN_DBG_DEBUG_STATE_CODE_ALGO] = "Algorithm code is running",
	[SEN_DBG_DEBUG_STATE_CODE_ALGO_SENSOR] = "Sensor driver code is running",
	[SEN_DBG_DEBUG_STATE_CODE_ALGO_ERROR] = "The algorithm error routine is running",
	[SEN_DBG_DEBUG_STATE_CODE_ALGO_KALMAN] = "The Kalman filter is running",
	[SEN_DBG_DEBUG_STATE_CODE_TINI] = "Teardown code is running",
	[SEN_DBG_DEBUG_STATE_CODE_GYRO_GPIO] = "The gyro gpio interrupt routine is running",
	[SEN_DBG_DEBUG_STATE_CODE_GYRO_I2C] = "The gyro calculation code is running",
	[SEN_DBG_DEBUG_STATE_CODE_MAG_GPIO] = "The mag gpio interrupt routine is running",
	[SEN_DBG_DEBUG_STATE_CODE_MAG_I2C] = "The mag calculation code is is running",
	[SEN_DBG_DEBUG_STATE_CODE_ACCEL_GPIO] = "The accel gpio interrupt routine is running",
	[SEN_DBG_DEBUG_STATE_CODE_ACCEL_I2C] = "The accel calculation code is is running ",
};

#endif /* _SENTRAL_IIO_DEBUG_H_ */